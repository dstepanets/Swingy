package unit.swingy.view.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import darrylbu.icon.StretchIcon;
import unit.swingy.controller.Game;
import unit.swingy.model.characters.Enemy;
import unit.swingy.model.characters.Hero;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

public class BattleGui {

	private Game game;
	private Hero hero;
	private Enemy enemy;
	private boolean diceRolled;

	private JFrame frame;
	private JPanel battlePanel;
	private JLabel enemyAvatar;
	private JLabel heroAvatar;
	private JScrollPane logPane;
	private JTextPane log;
	private JProgressBar enemyHP;
	private JProgressBar heroHP;
	private JButton bDice;
	private JLabel dice;
	private JButton bExit;
	private JLabel enemyDefence;
	private JLabel enemyAttack;
	private JLabel heroAttack;
	private JLabel heroDefence;
	private JLabel enemyClass;
	private JLabel heroClass;

	//	TODO: Fix all windows sizes!!!
	BattleGui(Hero h, Enemy e) {

		$$$setupUI$$$();

		game = Game.getInstance();
		hero = h;
		enemy = e;

		heroClass.setText(hero.getName() + ", " + hero.getClas().getClassName() + " (" + hero.getLevel() + " lvl)");
		enemyClass.setText(enemy.getClas().getClassName() + " (" + enemy.getLevel() + " lvl)");
		heroAttack.setText("Attack: " + hero.getAttack());
		enemyAttack.setText("Attack: " + enemy.getAttack());
		heroDefence.setText("Defence: " + hero.getDefence());
		enemyDefence.setText("Defence: " + enemy.getDefence());
		heroHP.setMaximum(hero.getMaxHp());
		enemyHP.setMaximum(enemy.getMaxHp());
		updateStats();

		heroAvatar.setIcon(hero.getClas().getAvatar());
		enemyAvatar.setIcon(enemy.getClas().getAvatar());
		dice.setPreferredSize(new Dimension(32, 32));
		dice.setIcon(new StretchIcon("src/main/resources/img/dice/dice.png"));

		createListeners();
		initFrame();

	}

	void updateStats() {
		heroHP.setValue(hero.getHp());
		enemyHP.setValue(enemy.getHp());
		heroHP.setString("HP: " + hero.getHp() + "/" + hero.getMaxHp());
		enemyHP.setString("HP: " + enemy.getHp() + "/" + enemy.getMaxHp());
	}

	private void initFrame() {

		frame = new JFrame("Battle");
		frame.setContentPane(battlePanel);
		frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		frame.pack();
		frame.setVisible(true);
	}

	private void createListeners() {

		bDice.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
//				random int from 1 to 6
				int diceNum = new Random().nextInt(6) + 1;
				showDice(diceNum);
				bDice.setEnabled(false);
				bDice.setText("End Battle");
				game.battle(diceNum);
			}
		});

		bExit.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				frame.dispose();
			}
		});

	}

	void logMessage(String msg, SimpleAttributeSet style) {

		Document doc = log.getStyledDocument();
		try {
			doc.insertString(doc.getLength(), msg + "\n", style);
		} catch (BadLocationException e) {
			e.printStackTrace();
		}
	}

	private void showDice(int num) {
		StretchIcon icon = new StretchIcon("src/main/resources/img/dice/" + num + ".png");
		dice.setIcon(icon);
	}

	public void enableExit() {
		bExit.setEnabled(true);
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	}


	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		battlePanel = new JPanel();
		battlePanel.setLayout(new GridLayoutManager(4, 7, new Insets(0, 0, 0, 0), -1, -1));
		enemyAvatar = new JLabel();
		enemyAvatar.setText("");
		battlePanel.add(enemyAvatar, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(256, 256), null, 0, false));
		heroAvatar = new JLabel();
		heroAvatar.setText("");
		battlePanel.add(heroAvatar, new GridConstraints(0, 5, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(256, 256), null, 0, false));
		logPane = new JScrollPane();
		battlePanel.add(logPane, new GridConstraints(0, 2, 3, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(400, 320), null, 0, false));
		log = new JTextPane();
		log.setEditable(false);
		logPane.setViewportView(log);
		enemyHP = new JProgressBar();
		enemyHP.setStringPainted(true);
		battlePanel.add(enemyHP, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		heroHP = new JProgressBar();
		heroHP.setStringPainted(true);
		battlePanel.add(heroHP, new GridConstraints(3, 5, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		bDice = new JButton();
		bDice.setForeground(new Color(-4521472));
		bDice.setHideActionText(false);
		bDice.setText("Roll the Dice");
		battlePanel.add(bDice, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		dice = new JLabel();
		dice.setText("");
		battlePanel.add(dice, new GridConstraints(3, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		bExit = new JButton();
		bExit.setEnabled(false);
		bExit.setText("Exit");
		battlePanel.add(bExit, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		enemyAttack = new JLabel();
		enemyAttack.setText("Attack");
		battlePanel.add(enemyAttack, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		enemyDefence = new JLabel();
		enemyDefence.setText("Defence");
		battlePanel.add(enemyDefence, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		heroAttack = new JLabel();
		heroAttack.setText("Attack");
		battlePanel.add(heroAttack, new GridConstraints(2, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		heroDefence = new JLabel();
		heroDefence.setText("Defence");
		battlePanel.add(heroDefence, new GridConstraints(2, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		enemyClass = new JLabel();
		Font enemyClassFont = this.$$$getFont$$$(null, Font.BOLD, -1, enemyClass.getFont());
		if (enemyClassFont != null) enemyClass.setFont(enemyClassFont);
		enemyClass.setText("Class");
		battlePanel.add(enemyClass, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		heroClass = new JLabel();
		Font heroClassFont = this.$$$getFont$$$(null, Font.BOLD, -1, heroClass.getFont());
		if (heroClassFont != null) heroClass.setFont(heroClassFont);
		heroClass.setText("Class");
		battlePanel.add(heroClass, new GridConstraints(1, 5, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
		if (currentFont == null) return null;
		String resultName;
		if (fontName == null) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font(fontName, Font.PLAIN, 10);
			if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return battlePanel;
	}

}
