package unit.swingy.view.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import unit.swingy.controller.Game;
import unit.swingy.model.Map;
import unit.swingy.model.MapTile;
import unit.swingy.model.characters.Hero;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import java.awt.*;
import java.io.File;
import java.io.IOException;

public class ExplorationGui {

	private Game game;
	private Hero hero;
	private Map map;
	private MapTile[][] grid;

	private JFrame frame;
	private JPanel mainPanel;
	private JPanel mapBack;
	private JPanel back;

	private JScrollPane enemyPane;
	private JLabel enemyAvatar;
	private JButton bN;
	private JButton bS;
	private JButton bE;
	private JButton bW;

	private JScrollPane heroPane;
	private JLabel heroAvatar;
	private JLabel heroName;
	private JLabel heroClass;
	private JProgressBar expBar;
	private JProgressBar hpBar;
	private JTextPane heroStats;


//	TODO Pack the images
//	The location of the image is also important. If the image is external to the application
//	(somewhere on the file system), you can use ImageIO.read(new File("/path/to/image")).
//	However, if the the image is embedded within your application (stored within the Jar for example),
//	you will need to use something more like ImageIO.read(getClass().getResource("/path/to/image")) instead...

	public ExplorationGui() {
		System.out.println(">> Constructing Exploration GUI...");

		game = Game.getInstance();
		hero = game.getHero();
		map = game.getMap();
		grid = map.getGrid();

		createUIComponents();

	}

	private void createUIComponents() {

		//init frame
		this.frame = new JFrame("World Exploration");
		frame.setContentPane(mainPanel);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.pack();
		frame.setVisible(true);

		buildMap();
		buildHeroPane();
	}


	private void buildHeroPane() {
		ImageIcon icon = new ImageIcon(hero.getClas().getAvatar());
		heroAvatar.setIcon(icon);
		heroAvatar.setToolTipText(hero.getClas().getDescription());

		heroName.setText(hero.getName());
		updateHeroPane();
	}

	private void updateHeroPane() {
		heroClass.setText(hero.getClas().getClassName() + " (" + hero.getLevel() + " lvl)");

		expBar.setMaximum(hero.getExpToLevelUp());
		expBar.setValue(hero.getExp());
		expBar.setString("EXP: " + hero.getExp() + "/" + hero.getExpToLevelUp());

		hpBar.setMaximum(hero.getMaxHp());
		hpBar.setValue(hero.getHp());
		hpBar.setString("HP: " + hero.getHp() + "/" + hero.getMaxHp());

		SimpleAttributeSet atr = new SimpleAttributeSet();
		Document statsDoc = heroStats.getStyledDocument();
		try {
			statsDoc.insertString(statsDoc.getLength(), "Attack: " + hero.getAttack() + "\n", atr);
			statsDoc.insertString(statsDoc.getLength(), "Defence: " + hero.getDefence() + "\n\n", atr);
			statsDoc.insertString(statsDoc.getLength(), "Weapon: " + hero.getWeapon() + "\n", atr);
			statsDoc.insertString(statsDoc.getLength(), "Armor: " + hero.getArmor() + "\n", atr);
			statsDoc.insertString(statsDoc.getLength(), "Helm: " + hero.getHelm() + "\n", atr);
		} catch (BadLocationException e) {
			e.printStackTrace();
		}
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		mainPanel = new JPanel();
		mainPanel.setLayout(new GridLayoutManager(8, 5, new Insets(0, 0, 0, 0), -1, -1));
		Font mainPanelFont = this.$$$getFont$$$("Apple SD Gothic Neo", -1, -1, mainPanel.getFont());
		if (mainPanelFont != null) mainPanel.setFont(mainPanelFont);
		mainPanel.setPreferredSize(new Dimension(1024, 600));
		mainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), null));
		enemyPane = new JScrollPane();
		mainPanel.add(enemyPane, new GridConstraints(1, 0, 5, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(256, -1), new Dimension(256, -1), new Dimension(256, -1), 0, false));
		heroPane = new JScrollPane();
		mainPanel.add(heroPane, new GridConstraints(5, 4, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(256, -1), new Dimension(256, -1), new Dimension(256, -1), 0, false));
		heroStats = new JTextPane();
		heroStats.setEditable(false);
		Font heroStatsFont = this.$$$getFont$$$("AppleGothic", -1, 14, heroStats.getFont());
		if (heroStatsFont != null) heroStats.setFont(heroStatsFont);
		heroPane.setViewportView(heroStats);
		bN = new JButton();
		bN.setText("North");
		mainPanel.add(bN, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		bS = new JButton();
		bS.setText("South");
		mainPanel.add(bS, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		bW = new JButton();
		bW.setText("West");
		mainPanel.add(bW, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		bE = new JButton();
		bE.setText("East");
		mainPanel.add(bE, new GridConstraints(7, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		enemyAvatar = new JLabel();
		enemyAvatar.setText("Enemy");
		mainPanel.add(enemyAvatar, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		heroAvatar = new JLabel();
		heroAvatar.setText("");
		mainPanel.add(heroAvatar, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		heroName = new JLabel();
		Font heroNameFont = this.$$$getFont$$$("Apple SD Gothic Neo", Font.BOLD, 16, heroName.getFont());
		if (heroNameFont != null) heroName.setFont(heroNameFont);
		heroName.setHorizontalAlignment(10);
		heroName.setHorizontalTextPosition(11);
		heroName.setText("Name");
		mainPanel.add(heroName, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		heroClass = new JLabel();
		Font heroClassFont = this.$$$getFont$$$("Apple SD Gothic Neo", Font.BOLD, 16, heroClass.getFont());
		if (heroClassFont != null) heroClass.setFont(heroClassFont);
		heroClass.setText("Class");
		mainPanel.add(heroClass, new GridConstraints(2, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		expBar = new JProgressBar();
		Font expBarFont = this.$$$getFont$$$("Herculanum", -1, 16, expBar.getFont());
		if (expBarFont != null) expBar.setFont(expBarFont);
		expBar.setString("EXP");
		expBar.setStringPainted(true);
		mainPanel.add(expBar, new GridConstraints(3, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		hpBar = new JProgressBar();
		Font hpBarFont = this.$$$getFont$$$("Herculanum", -1, 16, hpBar.getFont());
		if (hpBarFont != null) hpBar.setFont(hpBarFont);
		hpBar.setForeground(new Color(-8355712));
		hpBar.setIndeterminate(false);
		hpBar.setName("");
		hpBar.setString("HP");
		hpBar.setStringPainted(true);
		hpBar.setToolTipText("");
		mainPanel.add(hpBar, new GridConstraints(4, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		back = new JPanel();
		back.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		mainPanel.add(back, new GridConstraints(0, 3, 8, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(512, 512), new Dimension(800, 800), null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
		if (currentFont == null) return null;
		String resultName;
		if (fontName == null) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font(fontName, Font.PLAIN, 10);
			if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return mainPanel;
	}


	private class MapBack extends JPanel {
		Image img;

		public MapBack() {
			try {
				img = ImageIO.read(new File("src/main/resources/img/mapBack/Grass00.jpg"));
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		@Override
		public void paintComponent(Graphics g) {
			//paint background image
//			super.paintComponent(g);
			Graphics2D g2 = (Graphics2D) g;
			//g.drawImage(img, 0, 0, getWidth(), getHeight(), this);
			g2.drawImage(img, 0, 0, this);
		}
	}

	private void buildMap() {
		mapBack = new MapBack();
		mapBack.setLayout(new GridLayout(map.getSize(), map.getSize()));
//		mapBack.setLayout(new GridLayoutManager(1, 1,
//				new Insets(0, 0, 0, 0), -1, -1));
		back.add(mapBack, new GridConstraints(0, 0, 1, 1,
				GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK |
				GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				null, new Dimension(512, 512), null, 0, false));

		JLabel[][] labels = new JLabel[map.getSize()][map.getSize()];
		Border blackline = BorderFactory.createLineBorder(Color.white);
		for (int y = 0; y < map.getSize(); y++) {
			for (int x = 0; x < map.getSize(); x++) {
				labels[y][x] = new JLabel();
				labels[y][x].setBorder(blackline);
				labels[y][x].setHorizontalAlignment(SwingConstants.CENTER);
				labels[y][x].setVerticalAlignment(SwingConstants.CENTER);

				if (grid[y][x].getHero() != null) {
					ImageIcon icon = new ImageIcon(hero.getClas().getIcon());
					labels[y][x].setIcon(icon);
				} else if (grid[y][x].getEnemy() != null) {
					ImageIcon icon = new ImageIcon(grid[y][x].getEnemy().getClas().getIcon());
					labels[y][x].setIcon(icon);
				}

				mapBack.add(labels[y][x]);
			}
		}
	}


}
